const express = require("express");
const cors = require("cors");
const fs = require("fs");
const multer = require("multer");
const path = require("path");

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// Multer ayarÄ± (PDF yÃ¼kleme iÃ§in)
const upload = multer({
  dest: "uploads/",
  fileFilter: (req, file, cb) => {
    if (file.mimetype === "application/pdf") cb(null, true);
    else cb(new Error("Sadece PDF yÃ¼klenebilir!"));
  },
});

// JSON dosya yolu
const SORULAR_DOSYA = "./sorular.json";

// Ã–ÄŸrenciler geÃ§ici hafÄ±za
let ogrenciler = [];

// JSON dosyadan sorularÄ± okuma fonksiyonu
function sorularOku() {
  try {
    const data = fs.readFileSync(SORULAR_DOSYA, "utf8");
    return JSON.parse(data);
  } catch (err) {
    console.error("Sorular dosyasÄ± okunamadÄ± veya yok, boÅŸ obj dÃ¶ndÃ¼rÃ¼yorum.", err);
    return {};
  }
}

// JSON dosyasÄ±na sorularÄ± yazma fonksiyonu
function sorularYaz(sorular) {
  try {
    fs.writeFileSync(SORULAR_DOSYA, JSON.stringify(sorular, null, 2));
    return true;
  } catch (err) {
    console.error("Sorular dosyasÄ±na yazma hatasÄ±:", err);
    return false;
  }
}

// SorularÄ± baÅŸta yÃ¼kle
let sorular = sorularOku();

// KayÄ±t endpoint
app.post("/register", (req, res) => {
  const { kadi, sifre, sinif } = req.body;
  if (!kadi || !sifre || !sinif) {
    return res.status(400).json({ error: "TÃ¼m alanlar gerekli" });
  }
  if (ogrenciler.some(o => o.kadi.toLowerCase() === kadi.toLowerCase())) {
    return res.status(400).json({ error: "Bu kullanÄ±cÄ± adÄ± zaten kayÄ±tlÄ±." });
  }
  ogrenciler.push({ kadi, sifre, sinif, puan: 0, role: "ogrenci" });
  res.json({ message: "KayÄ±t baÅŸarÄ±lÄ±" });
});

// GiriÅŸ endpoint
app.post("/login", (req, res) => {
  const { kadi, sifre } = req.body;
  const kullanici = ogrenciler.find(
    o => o.kadi.toLowerCase() === kadi.toLowerCase() && o.sifre === sifre
  );
  if (!kullanici) {
    return res.status(401).json({ error: "KullanÄ±cÄ± adÄ± veya ÅŸifre yanlÄ±ÅŸ." });
  }
  const { sifre: sifreKaldir, ...kullaniciBilgi } = kullanici;
  res.json(kullaniciBilgi);
});

// KullanÄ±cÄ± bilgisi Ã§ekme endpoint
app.get("/user/:kadi", (req, res) => {
  const kadi = req.params.kadi.toLowerCase();
  const kullanici = ogrenciler.find(u => u.kadi.toLowerCase() === kadi);
  if (!kullanici) {
    return res.status(404).json({ error: "KullanÄ±cÄ± bulunamadÄ±" });
  }
  const { sifre, ...kullaniciBilgi } = kullanici; // Åžifreyi gizle
  res.json(kullaniciBilgi);
});

// Puan gÃ¼ncelleme endpoint
app.post("/user/:kadi/puan", (req, res) => {
  const kadi = req.params.kadi.toLowerCase();
  const { puan } = req.body;
  if (typeof puan !== "number") {
    return res.status(400).json({ error: "GeÃ§ersiz puan" });
  }
  const kullanici = ogrenciler.find(u => u.kadi.toLowerCase() === kadi);
  if (!kullanici) {
    return res.status(404).json({ error: "KullanÄ±cÄ± bulunamadÄ±" });
  }
  kullanici.puan = puan;
  res.json({ message: "Puan gÃ¼ncellendi", puan });
});

// SorularÄ± sÄ±nÄ±fa gÃ¶re getirme endpoint
app.get("/sorular/:sinif", (req, res) => {
  const sinif = req.params.sinif;
  if (!sorular[sinif]) {
    return res.status(404).json({ error: "SÄ±nÄ±f bulunamadÄ± veya sorular yok" });
  }
  res.json(sorular[sinif]);
});

// Puan hesaplama endpoint
app.post("/puanla", (req, res) => {
  const { sinif, cevaplar } = req.body;
  if (!sinif || !cevaplar || !Array.isArray(cevaplar)) {
    return res.status(400).json({ error: "SÄ±nÄ±f ve cevaplar gerekli" });
  }
  if (!sorular[sinif]) {
    return res.status(404).json({ error: "SÄ±nÄ±f iÃ§in sorular bulunamadÄ±" });
  }

  let toplamPuan = 0;
  const sinifSorular = sorular[sinif];

  cevaplar.forEach(({ id, secilenIndex }) => {
    const soru = sinifSorular.find(s => s.id === id);
    if (soru && soru.dogruIndex === secilenIndex) {
      toplamPuan += soru.puan || 0;
    }
  });

  res.json({ toplamPuan });
});

// PDF YÃ¼kleme endpoint - sadece dosyayÄ± kaydediyor, pdf iÃ§eriÄŸi iÅŸlenmesi ayrÄ± konu
app.post("/upload-pdf", upload.single("pdf"), (req, res) => {
  const sinif = req.body.sinif;
  if (!sinif) {
    return res.status(400).json({ error: "SÄ±nÄ±f belirtilmeli" });
  }
  if (!req.file) {
    return res.status(400).json({ error: "PDF dosyasÄ± eksik" });
  }

  // TODO: Burada pdf dosyasÄ±nÄ± aÃ§Ä±p sorularÄ± Ã§Ä±karmak gerekiyor
  // Åžimdilik dosyayÄ± kaydediyoruz, ileride pdf parser entegrasyonu yapÄ±lacak

  // Ä°stersen buradan sorularÄ± JSONâ€™a yazma iÅŸlemi yapÄ±labilir.
  // Åžu an sadece dosyayÄ± kaydediyoruz:
  const dosyaYolu = path.join(__dirname, req.file.path);
  console.log(`PDF ${dosyaYolu} kaydedildi, sÄ±nÄ±f: ${sinif}`);

  // Ã–rnek: Yeni sorularÄ± JSONâ€™a manuel ekle, ya da pdf parse sonrasÄ± otomatik ekle.

  res.json({ message: "PDF baÅŸarÄ±yla yÃ¼klendi, iÅŸleme hazÄ±r!" });
});

// Test endpoint
app.get("/", (req, res) => {
  res.send("Backend API Ã§alÄ±ÅŸÄ±yor dayÄ±! ðŸš€");
});

app.listen(port, () => {
  console.log(`Server ${port} portunda Ã§alÄ±ÅŸÄ±yor`);
});
